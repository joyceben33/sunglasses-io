swagger: "2.0"
info:
  title: "API for Sunglasses.io"
  description: "This is an API that gives us access to Swagger.io store."
  version: "1.0.0"
host: "localhost:3001"
schemes:
  - "https"
basePath: "/api"
tags: 
  - name: "Brands"
    description: "The Brand that made the pair of sunglasses"
  - name: "Products"
    description: "Sunglasses"
  - name: "Me"
    description: "A verified user"
paths:
  /brands:
    get:
      summary: "Brands"
      description: "A list of all the Brands"
      tags:
        - "Brands"
      responses: 
        200:
          description: "Success: An array of Brands"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Brands"
        default:
          description: "Unexpexted error"
          schema:
            $ref: '#/definitions/Error'
  /brands/:id/products:
    get:
      summary: "Products"
      description: "A list of products matching the brandID"
      tags:
      - "Brands"
      parameters:
        - name: "id"
          in: "path"
          description: "brandID"
          required: true
          type: "string"
      responses: 
        200:
          description: "Success: An array of Products with brandID"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        404:
          description: "Error: BrandId was not found"
        default:
          description: "Unexpexted error"
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      summary: "Products"
      description: "Products allows you to search based on name or description of the product your looking for."
      tags:
        - "Products"
      parameters:
        - name: "query"
          in: "query"
          description: "query from the search"
          required: false
          type: "string"
      responses:
        200:
          description: "An array of products"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Product'
        default:
          description: "Unexpected Error"
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
      - "Login"
      summary: "User Login"
      description : |
        Logs user into application
      parameters:
        - name: "Email"
          in: "header"
          required: true
          description: "Email login input"
          type: "string"
        - name: "Password"
          in: "header"
          required: true
          description: "Password login input"
          type: "string"
      responses:
        200:
          description: "Success: You are logged in an received an access token"
        400:
          description: "Error: Email or Password Field was left empty"
        401:
          description: "Error: Email or Password Field was incorrect"
  /me/cart:
    get:
      tags:
        - "Me"
      summary: "Shopping Cart"
      description: |
        Shopping cart for currently logged in user.
      responses:
        200:
          description: "An array of products in current user's cart"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Product'
          401:
            decription: "Error: You must be logged in to access the cart"
            schema: "#/definitions/AuthorizationError"
          default:
            description: "Unexpected Error"
            schema:
              $ref: '#/definitions/Error'
definitions:
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
  AuthorizationError:
    description: "Must be a verified user"
  Brands:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The Brands unique identifier"
      name:
        type: "string"
        description: "The name of the Brand"
  Product:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Id for a pair of sunglasses"
      brandId:
        type: "string"
        description: "The brand that made the pair of sunglasses"
      name:
        type: "string"
        description: "The name of the pair of sunglasses"
      description:
        type: "string"
        description: "The description of the pair of sunglasses"
      price:
        type: "integer"
        description: "The price associated with the pair of sunglasses"
      imageUrls:
        type: "array"
        items:
          type: "string"
        description: "An image of the pair of sunglasses"
  